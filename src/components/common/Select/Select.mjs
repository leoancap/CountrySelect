// Generated by ReScript, PLEASE EDIT WITH CARE

import * as CssJs from "bs-css-emotion/src/CssJs.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "../Button/Button.mjs";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactSelect from "../../../bindings/ReactSelect/ReactSelect.mjs";
import ReactSelect$1 from "react-select";
import List from "react-virtualized/dist/commonjs/List";
import AutoSizer from "react-virtualized/dist/commonjs/AutoSizer";

var className = CssJs.style([
      CssJs.position("absolute"),
      CssJs.marginTop({
            NAME: "px",
            VAL: 8
          }),
      CssJs.borderRadius({
            NAME: "px",
            VAL: 4
          }),
      CssJs.backgroundColor({
            NAME: "hex",
            VAL: "ffffff"
          }),
      CssJs.zIndex(2)
    ]);

function Select$Menu(Props) {
  var children = Props.children;
  return React.createElement("div", {
              className: className
            }, children);
}

var Menu = {
  className: className,
  make: Select$Menu
};

var className$1 = CssJs.style([
      CssJs.top("zero"),
      CssJs.right("zero"),
      CssJs.bottom("zero"),
      CssJs.left("zero"),
      CssJs.position("fixed"),
      CssJs.zIndex(1)
    ]);

function Select$Backdrop(Props) {
  var onClick = Props.onClick;
  return React.createElement("div", {
              className: className$1,
              onClick: onClick
            });
}

var Backdrop = {
  className: className$1,
  make: Select$Backdrop
};

var className$2 = CssJs.style([CssJs.position("relative")]);

function Select$Dropdown(Props) {
  var children = Props.children;
  var isOpen = Props.isOpen;
  var target = Props.target;
  var onClose = Props.onClose;
  return React.createElement("div", {
              className: className$2
            }, target, isOpen ? React.createElement(React.Fragment, undefined, React.createElement(Select$Menu, {
                        children: children
                      }), React.createElement(Select$Backdrop, {
                        onClick: onClose
                      })) : null);
}

var Dropdown = {
  className: className$2,
  make: Select$Dropdown
};

var className$3 = CssJs.style([
      CssJs.height({
            NAME: "px",
            VAL: -24
          }),
      CssJs.height({
            NAME: "px",
            VAL: -32
          })
    ]);

function Select$DropdownIndicator(Props) {
  return React.createElement("div", {
              className: className$3
            }, React.createElement("svg", {
                  role: "presentation",
                  height: "32",
                  width: "32",
                  focusable: "false",
                  viewBox: "-8 -8 24 24"
                }, React.createElement("path", {
                      clipRule: "evenodd",
                      d: "M10 5C10 6.01927 9.69501 6.96731 9.17131 7.75783L12.47 11.06L11.06 12.47L7.75786 9.17129C6.96734 9.695 6.01929 10 5 10C2.23858 10 0 7.76142 0 5C0 2.23858 2.23858 0 5 0C7.76142 0 10 2.23858 10 5ZM5 8.2C6.76731 8.2 8.2 6.76731 8.2 5C8.2 3.23269 6.76731 1.8 5 1.8C3.23269 1.8 1.8 3.23269 1.8 5C1.8 6.76731 3.23269 8.2 5 8.2Z",
                      fill: "#333333",
                      fillRule: "evenodd"
                    })));
}

var DropdownIndicator = {
  className: className$3,
  make: Select$DropdownIndicator
};

var className$4 = CssJs.style([
      CssJs.display("flex"),
      CssJs.height({
            NAME: "px",
            VAL: 28
          })
    ]);

function Select$ChevronDown(Props) {
  return React.createElement("svg", {
              height: "8",
              width: "8",
              fill: "none",
              viewBox: "0 0 8 5",
              xmlns: "http://www.w3.org/2000/svg"
            }, React.createElement("path", {
                  clipRule: "evenodd",
                  d: "M0 0H8L4 5L0 0Z",
                  fill: "#333333",
                  fillRule: "evenodd"
                }));
}

var ChevronDown = {
  className: className$4,
  make: Select$ChevronDown
};

var className$5 = CssJs.style([
      CssJs.display("flex"),
      CssJs.justifyContent("center"),
      CssJs.alignItems("center"),
      CssJs.height({
            NAME: "px",
            VAL: 35
          })
    ]);

function Select$NoOptions(Props) {
  return React.createElement("div", {
              className: className$5
            }, React.createElement("span", undefined, "No Options"));
}

var NoOptions = {
  className: className$5,
  make: Select$NoOptions
};

function Select(Props) {
  var autoFocus = Props.autoFocus;
  var backspaceRemovesValue = Props.backspaceRemovesValue;
  var className = Props.className;
  var controlShouldRenderValue = Props.controlShouldRenderValue;
  var formatOptionLabel = Props.formatOptionLabel;
  var hideSelectedOptions = Props.hideSelectedOptions;
  var isClearable = Props.isClearable;
  var onChange = Props.onChange;
  var options = Props.options;
  var value = Props.value;
  var match = React.useState(function () {
        return false;
      });
  var setIsOpen = match[1];
  var toggleOpen = function (param) {
    return Curry._1(setIsOpen, (function (isOpen) {
                  return !isOpen;
                }));
  };
  var components = React.useMemo((function () {
          return ReactSelect.createComponents((function (param) {
                        var focusedOption = param.focusedOption;
                        var options = ReactSelect.ChildrenOptions.checkHasOptions(param.children);
                        if (options === undefined) {
                          return React.createElement(Select$NoOptions, {});
                        }
                        var focusedOptionIndex = options.findIndex(function (thisChild) {
                              return Caml_obj.caml_equal(thisChild.props.data, focusedOption);
                            });
                        return React.createElement(AutoSizer, {
                                    children: (function (param) {
                                        return React.createElement(List, {
                                                    rowRenderer: (function (param) {
                                                        var index = param.index;
                                                        return React.createElement("div", {
                                                                    key: index.toString(),
                                                                    style: param.style
                                                                  }, Caml_array.get(options, index));
                                                      }),
                                                    rowHeight: (function (param) {
                                                        return 35;
                                                      }),
                                                    height: 200,
                                                    scrollToIndex: focusedOptionIndex > 0 ? focusedOptionIndex : 0,
                                                    width: param.width,
                                                    rowCount: options.length
                                                  });
                                      }),
                                    disableHeight: true
                                  });
                      }), (function (param) {
                        return null;
                      }), (function (param) {
                        return React.createElement(Select$DropdownIndicator, {});
                      }), (function (param) {
                        return null;
                      }), (function (pr) {
                        console.log("asdf", pr);
                        return "-------------No option";
                      }), undefined);
        }), []);
  var tmp = {
    components: components,
    formatOptionLabel: formatOptionLabel,
    menuIsOpen: true,
    onChange: (function (newValue) {
        Curry._1(setIsOpen, (function (isOpen) {
                return !isOpen;
              }));
        return Curry._1(onChange, (newValue == null) ? undefined : Caml_option.some(newValue));
      }),
    options: options,
    placeholder: "Search",
    styles: {
      control: (function (provided) {
          return Object.assign({}, provided, {
                      height: "35px",
                      marginBottom: "8px",
                      width: "370px",
                      flexDirection: "row-reverse"
                    });
        }),
      menu: (function (param) {
          return {
                  boxShadow: "inset 0 1px 0 rgba(0, 0, 0, 0.1)"
                };
        })
    }
  };
  if (autoFocus !== undefined) {
    tmp.autoFocus = autoFocus;
  }
  if (backspaceRemovesValue !== undefined) {
    tmp.backspaceRemovesValue = backspaceRemovesValue;
  }
  if (className !== undefined) {
    tmp.className = className;
  }
  if (controlShouldRenderValue !== undefined) {
    tmp.controlShouldRenderValue = controlShouldRenderValue;
  }
  if (hideSelectedOptions !== undefined) {
    tmp.hideSelectedOptions = hideSelectedOptions;
  }
  if (isClearable !== undefined) {
    tmp.isClearable = isClearable;
  }
  if (value !== undefined) {
    tmp.value = Caml_option.valFromOption(value);
  }
  return React.createElement("div", undefined, React.createElement(Select$Dropdown, {
                  children: React.createElement(ReactSelect$1, tmp),
                  isOpen: match[0],
                  target: React.createElement(Button.make, {
                        onClick: toggleOpen,
                        onKeyDown: (function (e) {
                            var match = e.key;
                            switch (match) {
                              case "Backspace" :
                              case "Escape" :
                                  return Curry._1(onChange, undefined);
                              default:
                                return ;
                            }
                          }),
                        itemRight: React.createElement(Select$ChevronDown, {}),
                        children: Curry._1(formatOptionLabel, value)
                      }),
                  onClose: toggleOpen
                }));
}

var make = Select;

export {
  Menu ,
  Backdrop ,
  Dropdown ,
  DropdownIndicator ,
  ChevronDown ,
  NoOptions ,
  make ,
  
}
/* className Not a pure module */
